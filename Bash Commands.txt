- Top 20 Bash Commands
    - ls — List directory contents 
        - ls is probably the most common command. A lot of times, you’ll be working in a directory and you’ll need to know what files are located there. The ls command allows you to quickly view all files within the specified directory.
            - Syntax: ls [option(s)] [file(s)]
            - Common options: -a, -l
    
    - echo — Prints text to the terminal window 
        - echo prints text to the terminal window and is typically used in shell scripts and batch files to output status text to the screen or a computer file. Echo is also particularly useful for showing the values of environmental variables, which tell the shell how to behave as a user works at the command line or in scripts.
            - Syntax: echo [option(s)] [string(s)]
            - Common options: -e, -n

    - touch — Creates
        - touch is going to be the easiest way to create new files, but it can also be used to change timestamps on files and/or directories.
        You can create as many files as you want in a single command without worrying about overwriting files with the same name.
            - Syntax: touch [option(s)] file_name(s)
            - Common options: -a, -m, -r, -d
    
    - mkdir — Create a directory 
        - touch is going to be the easiest way to create new files, but it can also be used to change timestamps on files and/or directories.
          You can create as many files as you want in a single command without worrying about overwriting files with the same name.
            - Syntax: mkdir [option(s)] directory_name(s)
            - Common options: -m, -p, -v 

    - grep — search
        - grep is used to search text for patterns specified by the user. It is one of the most useful and powerful commands.
         There are often scenarios where you’ll be tasked to find a particular string or pattern within a file, but you don’t know where to start looking, that is where grep is extremely useful.
            - Syntax: grep [option(s)] pattern [file(s)]
            - Common options: -i, -c, -n

    - man — Print manual or get help for a command
        - The man command is your manual and is very useful when you need to figure out what a command does.
          For example, if you didn’t know what the command rmdir does, you could use the man command to find that out.
            - Syntax: man [option(s)] keyword(s)
            - Common options: -w, -f, -b

    - pwd — Print working directory 
        - pwd is used to print the current directory you’re in.
         As an example, if you have multiple terminals going and you need to remember the exact directory you’re working within, then pwd will tell you.
            - Syntax: pwd [option(s)]
            - Common options: options aren’t typically used with pwd

    - cd — Change directory 
        - cd will change the directory you’re in so that you can get info, manipulate, read, etc.
         the different files and directories in your system.
            - Syntax: cd [option(s)] directory
            - Common options: options aren’t typically used with cd
    
    - mv — Move or rename directory 
        - mv is used to move or rename directories. Without this command, you would have to individually rename each file which is tedious.
         mv allows you to do batch file renaming which can save you loads of time.
            - Syntax: mv [option(s)] argument(s)
            - Common options: -i, -b

    - rmdir — Remove directory 
        - rmdir will remove empty directories. This can help clean up space on your computer and keep files and folders organized.
         It’s important to note that there are two ways to remove directories: rm and rmdir.
         The distinction between the two is that rmdir will only delete empty directories, whereas rm will remove directories and files regardless if they contain data or not.
            -  Syntax: rmdir [option(s)] directory_names
            - Common options: -p

    - locate — Locate a specific file or directory 
        - This is by far the simplest way to find a file or directory.
         You can keep your search broad if you don’t know what exactly it is you’re looking for, or you can narrow the scope by using wildcards or regular expressions.
            - Syntax: locate [option(s)] file_name(s)
            - Common options: -q, -n, -i

    - less — view the contents of a text file
        - The less command allows you to view files without opening an editor.
         It’s faster to use, and there’s no chance of you inadvertently modifying the file.
            - Syntax: less file_name
            - Common options: -e, -f, -n

    - compgen — Shows all available commands, aliases, and functions 
        - compgen is a handy command when you need to reference all available commands, aliases, and functions.
            - Syntax: compgen [option(s)]
            - Common options: -a, -c, -d

    - cat — Read a file, create a file, and concatenate files 
        - cat is one of the more versatile commands and serves three main functions:
         displaying them, combining copies of them, and creating new ones.
            - Syntax: cat [option(s)] [file_name(s)] [-] [file_name(s)] 
            - Common options: -n 
    
    - exit — Exit out of a home directory 
        - The exit command will close a terminal window, end the execution of a shell script, or log you out of an SSH remote access session.
            - Syntax: exit 
    
    - history — list your most recent commands 
        - An important command when you need to quickly identify past commands that you’ve used. 
            - Syntax: history 
            - Common options: -c, -d 

    - clear — Clear your terminal window 
        - This command is used to clear all previous commands and output from consoles and terminal windows.
         This keeps your terminal clean and removes the clutter so you can focus on subsequent commands and their output.
            - Syntax: clear
    
    - cp — copy files and directories 
        - Use this command when you need to back up your files. 
            - Syntax: cp [option(s)] current_name new_name 
    
    - kill — terminate stalled processes 
        - The kill command allows you to terminate a process from the command line.
         You do this by providing the process ID (PID) of the process to kill.
         To find the PID, you can use the ps command accompanied by options -aux.
            - Syntax: kill [signal or option(s)] PID(s) 

    - chmod: This command is used to change the permissions of a file in a directory.
        -   Syntax: chmod [options] mode user/group target
            1. Options: u+x, g+w, o+r, a+rwx
                - u = User
                - g = Group
                - o = Other users not in group
                - a = All users
                
            2. Mode: r=read, w=write, x=execute
              
